.globl read_rgb_image
##################################################################################
#	Licenciatura em Engenharia Informática	       
#	      Arquitetuta de Computadores I            
#		      2022/2023		       
#		Trabalho Realizado por:              
#		 João Santos nº 51966	       
#		 Diogo Matos nº 54466                
##################################################################################
.data
	imageRGB: .asciz "/home/diogo/Documents/Uni/AC1/Trabalho/starwars.rgb"
	imageFinalRGB: .asciz "/home/diogo/Documents/Uni/AC1/Trabalho/result.rgb"

	# 320*180*3 =  172800
	# 320*180 = 57600
	inicialBuffer: .space 172800
	resultBuffer: .space 57600
l
.text

##################################################################################
#Função: read_rgb_image	       			 		 
#Descrição:Lê um ficheiro com uma imagem no formato RGB para um array em memória.
#Argumentos:		       					 			
#	a0 - String com o nome do ficheiro            			 
#Retorna:	       							 
#	a2 - Endereço de um buffer onde a imagem deverá ser escrita                                                    
##################################################################################
read_rgb_image:
	#Abre o ficheiro
	li a7, 1024
	la a0, imageRGB
	li a1, 1
	ecall
	mv s6, a0
	
	#Lê o ficheiro
	li a7, 64
	la a1, inicialBuffer
	li a2, 172800
	ecall
	
	#Fecha o ficheiro
	li a7, 57
	mv a0,s6
	ecall
	ret
	
##################################################################################
#Função: write_rgb_image	       			 		 
#Descrição: Cria um ficheiro novo com uma imagem no formato RGB.		 
#Argumentos:		       					 			
#	a0 - nome do ficheiro					 
#	a1 - buffer da imagem					 
# 	a2 - comprimento do buffer           			           
#Retorna:	       							 
#	Não retorna nenhum valor				                                                   
##################################################################################
write_rgb_image:
	#Abre o ficheiro
	li a7, 1024
	la a0, imageFinalRGB
	li a1, 1
	ecall
	mv s6, a0
	
	#Escreve o ficheiro
	li a7, 64
	la a1, resultBuffer
	li a2, 57600
	ecall
	
	#Fecha o ficheiro
	li a7, 57
	mv a0, s6
	ecall
	ret
	
###################################################################################
#Função: hue	       			 		 	 
#Descrição: Calcula a componente Hue a partir das componentes R,G e B como pixel.		 
#Argumentos:		       					 			
#	a0 - pixel em formato de um buffer com 3 bytes         			           
#Retorna:	       							 
#	Retorna valor do Hue de um pixel				                                                   
###################################################################################
hue:
	li t0, 60

	#Ler Bytes e guardar nos registos temporários cada byte 
	lbu s0, 0(a0)
	lbu s1, 4(a0)
	lbu s2, 8(a0)
	
	#Verificação dos valores
	bgt s0,s1, L1		#R>G>=B	Laranja
	bge s1, s0, L2		#G>=R>B	Verde-amarelado
	bgt s1, s2, L3		#G>B>=R	Verde Primavera
	bge s2, s1, L4		#B>=G>R	Azure
	bgt s2, s0, L5		#B>R>=G	Violeta
	bge s0, s2, L6		#R>=B>G	Rosa
	
	
	
	L1:
		bge s1,s2, Calc1
		
		Calc1:
			sub t1,s1,s2	#G-B
			sub t2,s0, s2	#R-B
			div t1, t1, t2	#G-B/G-B	
			mul t1, t0, t1      #60*(G-B/R-B)
			
	
	L2:
		bgt s0,s2, Calc2
		
		Calc2: 
			sub t1, s0, s2	#R-B
			sub t2,s1,s2	#G-B
			div t1, t1, t2	#R-B/G-B
			slli t3, t0, 4	#2*60
			mul t1, t0, t1	#60*(R-B/G-B)
			sub t1, t3, t1	#120-60*(R-B/G-B)
		
	L3:
		bge s2, s1, Calc3
		
		Calc3:
			sub t1, s2, s0	#B-R
			sub t2, s1, s0	#G-R
			div t1, t1, t2	#B-R/G-R
			slli t3, t0, 4	#2*60
			mul t1, t0, t1	#60*(B-R/G-R)
			add t1, t3, t1	#120+60*(B-R/G-R)
			
	L4:
		bgt s1, s0, Calc4
		
		Calc4:
			sub t1, s1, s0	#G-R
			sub t2, s2, s0	#B-R
			div t1, t1, t2	#G-R/B-R
			mul t1, t0, t1	#60*(G-R/B-R)
			slli t3, t0, 8	#4*60
			sub t1, t3, t1	#240-60*(G-R/B-R)
			
	L5:
		bge s0, s1, Calc5
		
		Calc5:
			sub t1, s0, s1	#R-G
			sub t2, s2, s1	#B-G
			div t1, t1, t2	#R-G/B-G
			mul t1, t0, t1	#60*(R-G/B-G)
			slli t3, t0, 8	#4*60
			add t1, t3, t1	#240+60*(R-G/B-G)
			
			
	L6:
		bgt s2,s1, Calc6
		
		Calc6:
			sub t1, s2, s1	#B-G
			sub t2, s0, s1	#R-G
			div t1, t1, t2	#B-G/R-G
			mul t1, t0, t1	#60*(B-G/R-G)
			addi t0,t0,300	#60+300
			sub t1, t0,t1	#360-60*(B-G/R-G)
			
	
	j RET
	
RET:
	
	mv a0, t1	
	ret
	
##################################################################################
#Função: indicator	       			 		 
#Descrição: 		 
#Argumentos:		       					 			
#	a0 -            			           
#Retorna:	       							 
#					                                                   
##################################################################################
indicator: 


		

	

#################################################################################
main:
	#Função read_rgb_image
	la a0, imageRGB
	jal read_rgb_image
	
	
	#Função write_rgb_image
	la a0, imageFinalRGB
	jal write_rgb_image
